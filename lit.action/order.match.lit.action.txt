(async () => {
    try{
        const generateCallData = (makerTokenAddress,makerTokenUserAddress,makerTokenAmount,takerTokenAddress,takerTokenUserAddress,takerTokenAmount) => {
            const settleOrderInterface = new ethers.utils.Interface([
                "function settleOrder(address,address,uint256,address,address,uint256)",
            ]);
            return settleOrderInterface.encodeFunctionData("settleOrder", [
                makerTokenAddress,
                makerTokenUserAddress,
                makerTokenAmount,
                takerTokenAddress,
                takerTokenUserAddress,
                takerTokenAmount
            ]);
        }

         const generateUnsignedSettlingTransaction = (chainId,makerTokenAddress, makerTokenUserAddress,makerTokenAmount,takerTokenAddress,takerTokenUserAddress,takerTokenAmount) => {
            return {
                to: "0x32cBDB4f9ee29508eCffaa64643904A965A5DC83",
                value:0,
                nonce,
                gasLimit: "60000",
                gasPrice: gasPrice,
                from:  pkpAddress,
                data: generateCallData(makerTokenAddress,makerTokenUserAddress,makerTokenAmount,takerTokenAddress,takerTokenUserAddress,takerTokenAmount),
                type: 0,
                chainId,
            };
        }

        const hashTransaction = (tx) => {
             return ethers.utils.arrayify(
                   ethers.utils.keccak256(
                        ethers.utils.arrayify(ethers.utils.serializeTransaction(tx)),
                   ),
             );
        };

        let order1 = await Lit.Actions.decryptAndCombine({
            accessControlConditions:order1AccessControlConditions,
            ciphertext:order1Ciphertext,
            dataToEncryptHash:order1DataToEncryptHash,
            authSig: null,
            chain: 'ethereum',
        });
        order1=JSON.parse(order1);

        let order2= await Lit.Actions.decryptAndCombine({
            accessControlConditions:order2AccessControlConditions,
            ciphertext: order2Ciphertext,
            dataToEncryptHash:order2DataToEncryptHash,
            authSig: null,
            chain: 'ethereum',
        });
        order2=JSON.parse(order2);

        console.log(order1.sourceTokenAmount,order2.destTokenAmount,order1.destTokenAmount,order2.sourceTokenAmount);
        if(order1.sourceTokenAmount === order2.destTokenAmount && order1.destTokenAmount === order2.sourceTokenAmount){
            console.log(makerSourceTokenAddress)
            const orderSettlingTransaction = generateUnsignedSettlingTransaction(
                chainId,
                makerSourceTokenAddress,
                makerSourceTokenUserAddress,
                order1.sourceTokenAmount,
                takerSourceTokenAddress,
                takerSourceTokenUserAddress,
                order2.sourceTokenAmount
            );
            console.log(orderSettlingTransaction);

             const signature = await LitActions.signAndCombineEcdsa({
                    toSign: hashTransaction(orderSettlingTransaction),
                    publicKey: pkpPublicKey,
                    sigName: "settleOrderSignature",
            });

            const jsonSignature = JSON.parse(signature);
            jsonSignature.r = "0x" + jsonSignature.r.substring(2);
            jsonSignature.s = "0x" + jsonSignature.s;
            const hexSignature = ethers.utils.joinSignature(jsonSignature);

            const signedTx = ethers.utils.serializeTransaction(
                orderSettlingTransaction,
                hexSignature
            );

            const recoveredAddress = ethers.utils.recoverAddress(hashTransaction(orderSettlingTransaction), hexSignature);
            console.log("Recovered Address:", recoveredAddress);

            Lit.Actions.setResponse({
                    response: JSON.stringify({ signedTx }),
            });
            return;
        }

        Lit.Actions.setResponse({ response: "NOT_MATCHED" });
    }catch(error){
        console.log(error);
    }
})();